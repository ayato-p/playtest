# JSONのstring値を検証できる

## JSON Pathを指定してstring値を検証できる
* レスポンスボディとしてシナリオデータストアに"{ \"key1\": \"value1\", \"key2\": [ \"value2\" ] }"を保存する
* レスポンスのJSONの"$.key1"が文字列の"value1"である
* レスポンスのJSONの"$.key2[0]"が文字列の"value2"である

## JSON Pathを指定して配列を取得し、一意の値を持つオブジェクトを抽出し、そのオブジェクト内のstring値を検証できる
* レスポンスボディとしてシナリオデータストアに"{\"key1\":[{\"id\":\"a\",\"key3\":\"x\"}, {\"id\":\"b\",\"key3\": \"y\" }, {\"id\":\"c\",\"key3\":\"z\"}]}"を保存する
* レスポンスのJSONの"$.key1"の配列の、UniqueKey"id"の値が"b"である要素の"key3"が、文字列の"y"である

## JSON Pathを指定して配列を取得し、その配列内に指定したstring値が存在することを検証できる
* レスポンスボディとしてシナリオデータストアに"{\"tests\": [\"test1\", \"test2\", \"test3\"]}"を保存する
* レスポンスのJSONの配列"$.tests"に、文字列"test2"が存在する

## JSON Pathを指定して配列を取得し、その配列内に指定したstring値が存在しないことを検証できる
* レスポンスボディとしてシナリオデータストアに"{\"tests\": [\"test1\", \"test2\", \"test3\"]}"を保存する
* レスポンスのJSONの配列"$.tests"に、文字列"test4"が存在しない
