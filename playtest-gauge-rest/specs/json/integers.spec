# JSONの整数値を検証できる

## JSON Pathを指定して整数値を検証できる
* レスポンスボディとしてシナリオデータストアに"{ \"key1\": 0, \"key2\": [ 10 ] }"を保存する
* レスポンスのJSONの"$.key1"が整数の"0"である
* レスポンスのJSONの"$.key2[0]"が整数の"10"である

## JSON Pathを指定して配列を取得し、一意の値を持つオブジェクトを抽出し、そのオブジェクト内の整数値を検証できる
* レスポンスボディとしてシナリオデータストアに"{\"key1\":[{\"id\":\"a\",\"key3\":1}, {\"id\":\"b\",\"key3\": 2 }, {\"id\":\"c\",\"key3\":3}]}"を保存する
* レスポンスのJSONの"$.key1"の配列の、UniqueKey"id"の値が"b"である要素の"key3"が、整数値の"2"である

## JSON Pathを指定して配列を取得し、その配列内に指定した整数値が存在することを検証できる
* レスポンスボディとしてシナリオデータストアに"{\"tests\": [1, 2, 3]}"を保存する
* レスポンスのJSONの配列"$.tests"に、整数値"3"が存在する

## JSON Pathを指定して配列を取得し、その配列内に指定した整数値が存在しないことを検証できる
* レスポンスボディとしてシナリオデータストアに"{\"tests\": [1, 3]}"を保存する
* レスポンスのJSONの配列"$.tests"に、整数値"2"が存在しない
