# JSONPathを使用したレスポンスのJSONをアサートするステップ

## 文字列
* シナリオデータストアに"{\"test\": \"test\"}"を保存する
* レスポンスのJSONの"$.test"が文字列の"test"である

## 整数値
* シナリオデータストアに"{\"test\": 0}"を保存する
* レスポンスのJSONの"$.test"が整数の"0"である

## 小数値
* シナリオデータストアに"{\"test\": 0.0}"を保存する
* レスポンスのJSONの"$.test"が小数の"0.0"である

## 真偽値
* シナリオデータストアに"{\"test\": true}"を保存する
* レスポンスのJSONの"$.test"が真偽値の"true"である

## 配列のある1要素の値(文字列)
* シナリオデータストアに"{\"key1\":[{\"id\":\"a\",\"key3\":\"x\"}, {\"id\":\"b\",\"key3\": \"y\" }, {\"id\":\"c\",\"key3\":\"z\"}]}"を保存する
* レスポンスのJSONの"$.key1"の配列の"id"が"b"である一意な要素の"key3"が文字列の"y"である

## 配列のある1要素の値(整数)
* シナリオデータストアに"{\"key1\":[{\"id\":\"a\",\"key3\":1}, {\"id\":\"b\",\"key3\": 2 }, {\"id\":\"c\",\"key3\":3}]}"を保存する
* レスポンスのJSONの"$.key1"の配列の"id"が"b"である一意な要素の"key3"が整数値の"2"である

## 配列のある1要素の値(小数)
* シナリオデータストアに"{\"key1\":[{\"id\":\"a\",\"key3\":1.0}, {\"id\":\"b\",\"key3\": 2.0 }, {\"id\":\"c\",\"key3\":3.0}]}"を保存する
* レスポンスのJSONの"$.key1"の配列の"id"が"b"である一意な要素の"key3"が小数値の"2.0"である

## 配列のある1要素の値(真偽値)
* シナリオデータストアに"{\"key1\":[{\"id\":\"a\",\"key3\":false}, {\"id\":\"b\",\"key3\": true }, {\"id\":\"c\",\"key3\":true}]}"を保存する
* レスポンスのJSONの"$.key1"の配列の"id"が"b"である一意な要素の"key3"が真偽値の"true"である

## 配列の長さ
* シナリオデータストアに"{\"key1\":[{\"id\":\"a\",\"key3\":\"x\"}, {\"id\":\"b\",\"key3\": \"y\" }]}"を保存する
* レスポンスのJSONの"$.key1"の配列の長さが"2"である

## Keyが存在しない
tags: unimplmented
* シナリオデータストアに"{\"test\": true}"を保存する
* レスポンスのJSONの"$.nonexist"が存在しない

